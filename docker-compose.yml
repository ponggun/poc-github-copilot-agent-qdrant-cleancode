services:
  # Qdrant Vector Database (On-Premise)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant-db
    restart: unless-stopped
    ports:
      - "6333:6333"  # REST API
      - "6334:6334"  # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - qdrant-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web API Service
  webapi:
    build:
      context: .
      dockerfile: src/Presentation/WebApi/Dockerfile
    container_name: qdrant-webapi
    restart: unless-stopped
    ports:
      - "5030:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - Qdrant__Host=qdrant
      - Qdrant__Port=6333
      - Logging__LogLevel__Default=Information
    depends_on:
      qdrant:
        condition: service_healthy
    networks:
      - qdrant-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web App Service
  webapp:
    build:
      context: .
      dockerfile: src/Presentation/WebApp/Dockerfile
    container_name: qdrant-webapp
    restart: unless-stopped
    ports:
      - "5032:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ApiBaseUrl=http://webapi:8080/
      - Qdrant__Host=qdrant
      - Qdrant__Port=6333
      - Logging__LogLevel__Default=Information
    depends_on:
      webapi:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - qdrant-network

volumes:
  qdrant_data:
    driver: local

networks:
  qdrant-network:
    driver: bridge